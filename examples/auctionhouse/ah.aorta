if bel(me(Me)) {
	% only makes sense to become manager if capable of verifying registrations
	role(manager) : cap(verified(_)) => enact(manager).
	role(customer) : true => enact(customer).
	
	% buyer or seller, only if already customer
	role(seller) : org(rea(Me,customer)) => enact(seller).
	role(buyer) : org(rea(Me,customer)) => enact(buyer).
	
	if org(rea(Me,manager)) {
		obj(verified(Agent)) : ~bel(wrong_details(Agent)) => commit(verified(Agent)).
		
		% force participation
		obl(_,bel(participant(Id,Agent)),_) : true => commit(participate(Id,Agent)).
		
		% ban agents that participate without verification
		obl(_,\+ bel(participant(Id,Agent)),auction_done(Id)) : ~bel(handled(Agent)), 
				bel(auction(Id,_,_,_,End), time(N), Latest is N - 5, Latest > End)
			=> commit(ban(Agent)).
		obl(_,\+ bel(auction(Id,Item,Agent)),auction_done(Id)) : ~bel(handled(Agent)),
			 	bel(auction(Id,_,_,_,End), time(N), Latest is N - 5, Latest > End)
			=> commit(ban(Agent)).
		
		% force enactment or ban
		viol(_,org(rea(A,R))) : ~bel(triedEnact(A,R)) => commit(makeEnact(A,R)).
		viol(_,org(rea(A,R))) : bel(triedEnact(A,R)), ~bel(handled(Agent)) => commit(ban(A)).	
	}
	
	% coordination	
	if bel(agent(A), A \= Me) {
		% tell others about enacting roles
		send(_,tell,org(rea(Me,R))) : ~bel(sent(A, org(rea(Me,R)))) => send(A, org(rea(Me,R))).
	}
	
	if ~org(rea(Me,manager)) {
		obj(O) : cap(O) => commit(O).
		
		% delegate objective (alternative to using the send-option)
		obj(O) : org(rea(Me,R), dep(R,R2,bel(O)), rea(A,R2)) => send(A, opt(obj(O))). 
		
		% only pay if the agent actually wants the item (if violated)
		viol(customer,bel(paid(Id))) : bel(auction(Id,Item,_,_,_), want(Item,_)) => commit(paid(Id)).
		
		% only deliver once paid (if violated)
		viol(customer,bel(delivered(Id))) : bel(paid(Id)) => commit(delivered(Id)). 
	}
}